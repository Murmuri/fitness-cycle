{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport DraggableFlatList from 'react-native-draggable-flatlist';\nimport { VscGrabber } from 'react-icons/vsc';\nimport { SwipeRow } from 'react-native-swipe-list-view';\nexport var Exercises = function (_React$Component) {\n  _inherits(Exercises, _React$Component);\n\n  var _super = _createSuper(Exercises);\n\n  function Exercises() {\n    var _this;\n\n    _classCallCheck(this, Exercises);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      data: [{\n        name: '',\n        count: '1',\n        key: 'item-0'\n      }]\n    };\n\n    _this.renderItem = function (_ref) {\n      var item = _ref.item,\n          index = _ref.index,\n          drag = _ref.drag,\n          isActive = _ref.isActive;\n      var data = _this.state.data;\n      return React.createElement(SwipeRow, {\n        rightOpenValue: -180\n      }, React.createElement(View, {\n        style: {\n          height: 75,\n          backgroundColor: '#d3c2f8',\n          alignItems: 'center',\n          justifyContent: 'center',\n          flexDirection: 'row',\n          flexWrap: 'wrap',\n          padding: '10px'\n        }\n      }, React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          console.log(\"press\");\n        }\n      }, React.createElement(Text, null, \"Delete\"))), React.createElement(TouchableOpacity, {\n        style: {\n          height: 75,\n          backgroundColor: isActive ? '#d3c2f8' : 'white',\n          alignItems: 'center',\n          justifyContent: 'center',\n          flexDirection: 'row',\n          flexWrap: 'wrap',\n          padding: '10px'\n        },\n        onLongPress: drag\n      }, React.createElement(VscGrabber, {\n        style: {\n          height: '25px',\n          width: '25px',\n          marginRight: '20px'\n        }\n      }), React.createElement(TextInput, {\n        style: {\n          width: '50%',\n          fontSize: 20,\n          marginRight: '10px'\n        },\n        onChangeText: function onChangeText(text) {\n          _this.setData(text, 'name', index);\n        },\n        value: item.name,\n        placeholder: \"Exercise name\"\n      }), React.createElement(Button, {\n        onPress: function onPress() {\n          var count = Number(item.count) - 1;\n\n          if (count < 1) {\n            count = 1;\n          }\n\n          _this.setData(String(count), 'count', index);\n        },\n        title: \"-\",\n        color: \"#c4f54e\",\n        accessibilityLabel: \"-\"\n      }), React.createElement(Text, {\n        style: {\n          fontSize: 20,\n          marginRight: '15px',\n          marginLeft: '15px'\n        }\n      }, item.count), React.createElement(Button, {\n        onPress: function onPress() {\n          var count = Number(item.count) + 1;\n\n          _this.setData(String(count), 'count', index);\n        },\n        title: \"+\",\n        color: \"#61d284\",\n        accessibilityLabel: \"+\"\n      })));\n    };\n\n    return _this;\n  }\n\n  _createClass(Exercises, [{\n    key: \"setData\",\n    value: function setData(value, column, index) {\n      var data = this.state.data;\n      data[index][column] = value;\n      this.setState({\n        data: data\n      });\n    }\n  }, {\n    key: \"renderDraggableList\",\n    value: function renderDraggableList() {\n      var _this2 = this;\n\n      var data = this.state.data;\n      return React.createElement(View, {\n        style: {\n          backgroundColor: '#fff',\n          alignItems: 'center',\n          justifyContent: 'center',\n          width: '100%'\n        }\n      }, React.createElement(DraggableFlatList, {\n        key: 'draggable-flat-list' + Math.random(),\n        data: data,\n        renderItem: this.renderItem,\n        keyExtractor: function keyExtractor(item, index) {\n          return \"draggable-item-\" + item.key;\n        },\n        onDragEnd: function onDragEnd(_ref2) {\n          var data = _ref2.data;\n          return _this2.setState({\n            data: data\n          });\n        }\n      }), React.createElement(View, {\n        style: {\n          marginTop: '15px'\n        }\n      }, React.createElement(Button, {\n        onPress: function onPress() {\n          data.push({\n            name: '',\n            count: '1',\n            key: 'item-' + data.length\n          });\n\n          _this2.setState({\n            data: data\n          });\n        },\n        title: \"Add\",\n        color: \"#1b434d\",\n        accessibilityLabel: \"Start timer\"\n      })));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var edit = this.props.edit;\n      return React.createElement(View, null, this.renderDraggableList());\n    }\n  }]);\n\n  return Exercises;\n}(React.Component);\nexport default Exercises;","map":{"version":3,"sources":["/home/rumble/dev/my/fitness-cycle/src/components/exercises/index.tsx"],"names":["React","DraggableFlatList","VscGrabber","SwipeRow","Exercises","state","data","name","count","key","renderItem","item","index","drag","isActive","height","backgroundColor","alignItems","justifyContent","flexDirection","flexWrap","padding","console","log","width","marginRight","fontSize","text","setData","Number","String","marginLeft","value","column","setState","Math","random","marginTop","push","length","edit","props","renderDraggableList","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View, TouchableOpacity, Button, TextInput, Text  } from 'react-native';\nimport DraggableFlatList, { RenderItemParams } from 'react-native-draggable-flatlist';\nimport { VscGrabber } from 'react-icons/vsc';\nimport { SwipeRow } from 'react-native-swipe-list-view'\n\n\ntype Item = {\n    key: string;\n    name: string;\n    count: string;\n};\n\nexport class Exercises extends React.Component<any, any>{\n\n    state = {\n        data: [\n            {\n                name: '',\n                count: '1',\n                key: 'item-0'\n            }\n        ]\n    }\n\n    setData(value: string, column: 'key'|'name'|'count', index: number) {\n        const { data } = this.state;\n        data[index][column] = value;\n       \n        this.setState({ data });\n    }\n \n    renderItem = ({ item, index, drag, isActive }: RenderItemParams<Item>) => {\n        const { data } = this.state;\n        \n        return (\n            <SwipeRow rightOpenValue={-180}>\n                <View\n                    style={{\n                        height: 75,\n                        backgroundColor: '#d3c2f8',\n                        alignItems: 'center',\n                        justifyContent: 'center',\n                        flexDirection: 'row',\n                        flexWrap: 'wrap',\n                        padding: '10px'\n                    }}\n                >\n                    <TouchableOpacity onPress={()=>{console.log(\"press\")}}>\n                        <Text>Delete</Text>\n                    </TouchableOpacity>\n                </View>\n                \n                <TouchableOpacity\n                    style={{\n                        height: 75,\n                        backgroundColor: isActive ? '#d3c2f8' : 'white',\n                        alignItems: 'center',\n                        justifyContent: 'center',\n                        flexDirection: 'row',\n                        flexWrap: 'wrap',\n                        padding: '10px'\n                    }}\n                    onLongPress={ drag }\n                >\n                    <VscGrabber \n                        style={{\n                            height: '25px' , \n                            width: '25px', \n                            marginRight: '20px'\n                        }}/>\n                    <TextInput\n                        style={{\n                            width: '50%',\n                            fontSize: 20,\n                            marginRight: '10px'\n                        }}\n                        onChangeText={(text) => {\n                            this.setData(text, 'name', index as number );\n                        }}\n                        value={ item.name }\n                        placeholder='Exercise name'\n                    />\n                    <Button \n                        onPress={() => {\n                            let count = Number(item.count) - 1;\n\n                            if ( count < 1 ) {\n                                count = 1;\n                            }\n\n                            this.setData(String(count), 'count', index as number );\n                        }} \n                        title='-' \n                        color='#c4f54e' \n                        accessibilityLabel='-'\n                    />\n                    <Text\n                        style={{\n                            fontSize: 20,\n                            marginRight: '15px',\n                            marginLeft: '15px'\n                        }}\n                    >\n                        { item.count }\n                    </Text>\n                    <Button \n                        onPress={() => {\n                            let count = Number(item.count) + 1;\n\n                            this.setData(String(count), 'count', index as number );\n                        }} \n                        title='+' \n                        color='#61d284' \n                        accessibilityLabel='+' \n                    />\n                </TouchableOpacity>\n            </SwipeRow>\n        );\n    } \n\n    renderDraggableList() {\n        const { data } = this.state;\n        return (\n            <View style={{  \n                backgroundColor: '#fff',\n                alignItems: 'center',\n                justifyContent: 'center',\n                width: '100%'\n            }}>\n                <DraggableFlatList\n                    key={ 'draggable-flat-list' + Math.random() }\n                    data={ data }\n                    renderItem={ this.renderItem }\n                    keyExtractor={(item, index) => `draggable-item-${item.key}`}\n                    onDragEnd={({ data }) => this.setState({ data })}\n                />\n                <View style={{ marginTop: '15px' }}>\n                    <Button \n                        onPress={() => {\n                            data.push({\n                                name: '',\n                                count: '1',\n                                key: 'item-' + data.length\n                            })\n\n                            this.setState({ data });\n                        }} \n                        title='Add' \n                        color='#1b434d' \n                        accessibilityLabel='Start timer'\n                    />\n                </View>\n            </View>\n        );\n    }\n\n    render() {\n        const { edit } = this.props;\n\n        return (\n            <View>\n                { this.renderDraggableList() }\n            </View>\n        );\n    }   \n   \n}\n\n\nexport default Exercises;\n"]},"metadata":{},"sourceType":"module"}