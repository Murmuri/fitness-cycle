{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport React, { useState, useCallback } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport DraggableFlatList from \"react-native-draggable-flatlist\";\nvar NUM_ITEMS = 10;\n\nfunction getColor(i) {\n  var multiplier = 255 / (NUM_ITEMS - 1);\n  var colorVal = i * multiplier;\n  return \"rgb(\" + colorVal + \", \" + Math.abs(128 - colorVal) + \", \" + (255 - colorVal) + \")\";\n}\n\nvar exampleData = _toConsumableArray(Array(20)).map(function (d, index) {\n  var backgroundColor = getColor(index);\n  return {\n    key: \"item-\" + backgroundColor,\n    label: String(index),\n    backgroundColor: backgroundColor\n  };\n});\n\nfunction Exercises() {\n  var _useState = useState(exampleData),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var renderItem = useCallback(function (_ref) {\n    var item = _ref.item,\n        index = _ref.index,\n        drag = _ref.drag,\n        isActive = _ref.isActive;\n    return React.createElement(TouchableOpacity, {\n      style: {\n        height: 100,\n        backgroundColor: isActive ? \"red\" : item.backgroundColor,\n        alignItems: \"center\",\n        justifyContent: \"center\"\n      },\n      onLongPress: drag\n    }, React.createElement(TextInput, {\n      style: {\n        fontWeight: \"bold\",\n        color: \"white\",\n        width: '40%',\n        fontSize: 32\n      },\n      onChangeText: onChangeText,\n      value: text\n    }), React.createElement(TextInput, {\n      style: {\n        fontWeight: \"bold\",\n        color: \"white\",\n        fontSize: 32\n      },\n      onChangeText: onChangeText,\n      value: text\n    }), React.createElement(Input, null), React.createElement(Text, {\n      style: {\n        fontWeight: \"bold\",\n        color: \"white\",\n        fontSize: 32\n      }\n    }, item.label));\n  }, []);\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      backgroundColor: '#fff',\n      alignItems: 'center',\n      justifyContent: 'center',\n      width: '100%'\n    }\n  }, React.createElement(DraggableFlatList, {\n    data: data,\n    renderItem: renderItem,\n    keyExtractor: function keyExtractor(item, index) {\n      return \"draggable-item-\" + item.key;\n    },\n    onDragEnd: function onDragEnd(_ref2) {\n      var data = _ref2.data;\n      return setData(data);\n    }\n  }));\n}\n\nexport default Exercises;","map":{"version":3,"sources":["/Users/rumble/dev/my/fitness-cycle/src/components/exercises/index.tsx"],"names":["React","useState","useCallback","DraggableFlatList","NUM_ITEMS","getColor","i","multiplier","colorVal","Math","abs","exampleData","Array","map","d","index","backgroundColor","key","label","String","Exercises","data","setData","renderItem","item","drag","isActive","height","alignItems","justifyContent","fontWeight","color","width","fontSize","onChangeText","text","flex"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport { View, TouchableOpacity, Text, TextInput } from \"react-native\";\nimport DraggableFlatList, { RenderItemParams } from \"react-native-draggable-flatlist\";\n\nconst NUM_ITEMS = 10;\n\nfunction getColor(i: number) {\n  const multiplier = 255 / (NUM_ITEMS - 1);\n  const colorVal = i * multiplier;\n  return `rgb(${colorVal}, ${Math.abs(128 - colorVal)}, ${255 - colorVal})`;\n}\n\nconst exampleData: Item[] = [...Array(20)].map((d, index) => {\n  const backgroundColor = getColor(index);\n  return {\n    key: `item-${backgroundColor}`,\n    label: String(index),\n    backgroundColor\n  };\n});\n\ntype Item = {\n  key: string;\n  label: string;\n  backgroundColor: string;\n};\n\nfunction Exercises() {\n  const [data, setData] = useState(exampleData);\n\n  const renderItem = useCallback(\n    ({ item, index, drag, isActive }: RenderItemParams<Item>) => {\n      return (\n        <TouchableOpacity\n          style={{\n            height: 100,\n            backgroundColor: isActive ? \"red\" : item.backgroundColor,\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n          onLongPress={drag}\n        >\n          <TextInput\n            style={{\n              fontWeight: \"bold\",\n              color: \"white\",\n              width: '40%',\n              fontSize: 32,\n            }}\n            onChangeText={onChangeText}\n            value={text}\n          />\n          <TextInput\n            style={{\n              fontWeight: \"bold\",\n              color: \"white\",\n              fontSize: 32,\n            }}\n            onChangeText={onChangeText}\n            value={text}\n          />\n          <Input />\n          <Text\n            style={{\n              fontWeight: \"bold\",\n              color: \"white\",\n              fontSize: 32,\n            }}\n          >\n            {item.label}\n          </Text>\n        </TouchableOpacity>\n      );\n    },\n    []\n  );\n\n  return (\n    <View style={{  \n      flex: 1,\n      backgroundColor: '#fff',\n      alignItems: 'center',\n      justifyContent: 'center',\n      width: '100%'\n    }}>\n      <DraggableFlatList\n        data={data}\n        renderItem={renderItem}\n        keyExtractor={(item, index) => `draggable-item-${item.key}`}\n        onDragEnd={({ data }) => setData(data)}\n      />\n    </View>\n  );\n}\n\n\nexport default Exercises;\n"]},"metadata":{},"sourceType":"module"}