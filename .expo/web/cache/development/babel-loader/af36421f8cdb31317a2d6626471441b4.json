{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { useState, useCallback } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport DraggableFlatList from \"react-native-draggable-flatlist\";\n\nvar Exercises = function (_React$Component) {\n  _inherits(Exercises, _React$Component);\n\n  var _super = _createSuper(Exercises);\n\n  function Exercises() {\n    var _this;\n\n    _classCallCheck(this, Exercises);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(Exercises, [{\n    key: \"render\",\n    value: function render() {\n      var NUM_ITEMS = 10;\n\n      function getColor(i) {\n        var multiplier = 255 / (NUM_ITEMS - 1);\n        var colorVal = i * multiplier;\n        return \"rgb(\" + colorVal + \", \" + Math.abs(128 - colorVal) + \", \" + (255 - colorVal) + \")\";\n      }\n\n      var exampleData = _toConsumableArray(Array(20)).map(function (d, index) {\n        var backgroundColor = getColor(index);\n        return {\n          key: \"item-\" + backgroundColor,\n          label: String(index),\n          backgroundColor: backgroundColor\n        };\n      });\n\n      var _useState = useState(exampleData),\n          _useState2 = _slicedToArray(_useState, 2),\n          data = _useState2[0],\n          setData = _useState2[1];\n\n      var renderItem = useCallback(function (_ref) {\n        var item = _ref.item,\n            index = _ref.index,\n            drag = _ref.drag,\n            isActive = _ref.isActive;\n        return React.createElement(TouchableOpacity, {\n          style: {\n            height: 100,\n            backgroundColor: isActive ? \"red\" : item.backgroundColor,\n            alignItems: \"center\",\n            justifyContent: \"center\"\n          },\n          onLongPress: drag\n        }, React.createElement(Text, {\n          style: {\n            fontWeight: \"bold\",\n            color: \"white\",\n            fontSize: 32\n          }\n        }, item.label));\n      }, []);\n      return React.createElement(View, {\n        style: styles.container\n      }, React.createElement(DraggableFlatList, {\n        data: data,\n        renderItem: renderItem,\n        keyExtractor: function keyExtractor(item, index) {\n          return \"draggable-item-\" + item.key;\n        },\n        onDragEnd: function onDragEnd(_ref2) {\n          var data = _ref2.data;\n          return setData(data);\n        }\n      }));\n    }\n  }]);\n\n  return Exercises;\n}(React.Component);\n\nexport { Exercises as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/Users/rumble/dev/my/fitness-cycle/src/components/exercises/index.tsx"],"names":["React","useState","useCallback","DraggableFlatList","Exercises","state","NUM_ITEMS","getColor","i","multiplier","colorVal","Math","abs","exampleData","Array","map","d","index","backgroundColor","key","label","String","data","setData","renderItem","item","drag","isActive","height","alignItems","justifyContent","fontWeight","color","fontSize","styles","container","Component","StyleSheet","create","flex"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,QAA6C,OAA7C;;;;;AAEA,OAAOC,iBAAP,MAAoD,iCAApD;;IAEqBC,S;;;;;;;;;;;;;;;UAEjBC,K,GAAQ,E;;;;;;WAIR,kBAAS;AACL,UAAMC,SAAS,GAAG,EAAlB;;AAEA,eAASC,QAAT,CAAkBC,CAAlB,EAA6B;AACzB,YAAMC,UAAU,GAAG,OAAOH,SAAS,GAAG,CAAnB,CAAnB;AACA,YAAMI,QAAQ,GAAGF,CAAC,GAAGC,UAArB;AAEA,wBAAcC,QAAd,UAA2BC,IAAI,CAACC,GAAL,CAAS,MAAMF,QAAf,CAA3B,WAAwD,MAAMA,QAA9D;AACH;;AAED,UAAMG,WAAmB,GAAG,mBAAIC,KAAK,CAAC,EAAD,CAAT,EAAeC,GAAf,CAAmB,UAACC,CAAD,EAAIC,KAAJ,EAAc;AACzD,YAAMC,eAAe,GAAGX,QAAQ,CAACU,KAAD,CAAhC;AAEA,eAAO;AACHE,UAAAA,GAAG,YAAUD,eADV;AAEHE,UAAAA,KAAK,EAAEC,MAAM,CAACJ,KAAD,CAFV;AAGHC,UAAAA,eAAe,EAAfA;AAHG,SAAP;AAKH,OAR2B,CAA5B;;AAgBA,sBAAwBjB,QAAQ,CAACY,WAAD,CAAhC;AAAA;AAAA,UAAOS,IAAP;AAAA,UAAaC,OAAb;;AAEA,UAAMC,UAAU,GAAGtB,WAAW,CAC1B,gBAA6D;AAAA,YAA1DuB,IAA0D,QAA1DA,IAA0D;AAAA,YAApDR,KAAoD,QAApDA,KAAoD;AAAA,YAA7CS,IAA6C,QAA7CA,IAA6C;AAAA,YAAvCC,QAAuC,QAAvCA,QAAuC;AACzD,eACI,oBAAC,gBAAD;AACI,UAAA,KAAK,EAAE;AACHC,YAAAA,MAAM,EAAE,GADL;AAEHV,YAAAA,eAAe,EAAES,QAAQ,GAAG,KAAH,GAAWF,IAAI,CAACP,eAFtC;AAGHW,YAAAA,UAAU,EAAE,QAHT;AAIHC,YAAAA,cAAc,EAAE;AAJb,WADX;AAOI,UAAA,WAAW,EAAEJ;AAPjB,WASA,oBAAC,IAAD;AACI,UAAA,KAAK,EAAE;AACHK,YAAAA,UAAU,EAAE,MADT;AAEHC,YAAAA,KAAK,EAAE,OAFJ;AAGHC,YAAAA,QAAQ,EAAE;AAHP;AADX,WAOKR,IAAI,CAACL,KAPV,CATA,CADJ;AAqBH,OAvByB,EAwB1B,EAxB0B,CAA9B;AA2BA,aACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAGc,MAAM,CAACC;AAArB,SACI,oBAAC,iBAAD;AACI,QAAA,IAAI,EAAEb,IADV;AAEI,QAAA,UAAU,EAAEE,UAFhB;AAGI,QAAA,YAAY,EAAE,sBAACC,IAAD,EAAOR,KAAP;AAAA,qCAAmCQ,IAAI,CAACN,GAAxC;AAAA,SAHlB;AAII,QAAA,SAAS,EAAE;AAAA,cAAGG,IAAH,SAAGA,IAAH;AAAA,iBAAcC,OAAO,CAACD,IAAD,CAArB;AAAA;AAJf,QADJ,CADJ;AAUH;;;;EAvEkCtB,KAAK,CAACoC,S;;SAAxBhC,S;AA0ErB,IAAM8B,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;AAC7BH,EAAAA,SAAS,EAAE;AACPI,IAAAA,IAAI,EAAE,CADC;AAEPrB,IAAAA,eAAe,EAAE,MAFV;AAGPW,IAAAA,UAAU,EAAE,QAHL;AAIPC,IAAAA,cAAc,EAAE;AAJT;AADkB,CAAlB,CAAf","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport { View, TouchableOpacity, Text, StyleSheet } from \"react-native\";\nimport DraggableFlatList, { RenderItemParams } from \"react-native-draggable-flatlist\";\n\nexport default class Exercises extends React.Component {\n\n    state = {\n    \n    }\n\n    render() {\n        const NUM_ITEMS = 10;\n\n        function getColor(i: number) {\n            const multiplier = 255 / (NUM_ITEMS - 1);\n            const colorVal = i * multiplier;\n\n            return `rgb(${colorVal}, ${Math.abs(128 - colorVal)}, ${255 - colorVal})`;\n        }\n\n        const exampleData: Item[] = [...Array(20)].map((d, index) => {\n            const backgroundColor = getColor(index);\n\n            return {\n                key: `item-${backgroundColor}`,\n                label: String(index),\n                backgroundColor\n            };\n        });\n\n        type Item = {\n            key: string;\n            label: string;\n            backgroundColor: string;\n        };\n\n        const [data, setData] = useState(exampleData);\n\n        const renderItem = useCallback(\n            ({ item, index, drag, isActive }: RenderItemParams<Item>) => {\n                return (\n                    <TouchableOpacity\n                        style={{\n                            height: 100,\n                            backgroundColor: isActive ? \"red\" : item.backgroundColor,\n                            alignItems: \"center\",\n                            justifyContent: \"center\",\n                        }}\n                        onLongPress={drag}\n                    >\n                    <Text\n                        style={{\n                            fontWeight: \"bold\",\n                            color: \"white\",\n                            fontSize: 32,\n                        }}\n                    >\n                        {item.label}\n                    </Text>\n                    </TouchableOpacity>\n                );\n            },\n            []\n        );\n\n        return (\n            <View style={ styles.container }>\n                <DraggableFlatList\n                    data={data}\n                    renderItem={renderItem}\n                    keyExtractor={(item, index) => `draggable-item-${item.key}`}\n                    onDragEnd={({ data }) => setData(data)}\n                />\n            </View>\n        );\n    }\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: '#fff',\n        alignItems: 'center',\n        justifyContent: 'center',\n    }\n});\n"]},"metadata":{},"sourceType":"module"}