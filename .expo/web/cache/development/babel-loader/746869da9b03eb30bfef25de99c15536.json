{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\n\nvar Timer = function (_React$Component) {\n  _inherits(Timer, _React$Component);\n\n  var _super = _createSuper(Timer);\n\n  function Timer() {\n    var _this;\n\n    _classCallCheck(this, Timer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.timerIsStart = false;\n    _this.maxTime = 5;\n    _this.state = {\n      timer: _this.maxTime,\n      loop: 1,\n      maxLoop: 4\n    };\n\n    _this.timer = function () {\n      var timer = _this.state.timer;\n      var timerId = setInterval(function () {\n        if (timer > 0 && _this.timerIsStart) {\n          timer -= 1;\n\n          _this.setState({\n            timer: timer\n          });\n        } else if (timer <= 0 && _this.timerIsStart) {\n          var _this$state = _this.state,\n              loop = _this$state.loop,\n              maxLoop = _this$state.maxLoop;\n\n          if (loop >= maxLoop) {\n            _this.setState({\n              loop: maxLoop\n            });\n          } else {\n            _this.setState({\n              loop: loop + 1\n            });\n          }\n\n          _this.resetTimer();\n\n          clearInterval(timerId);\n        } else if (timer <= 0 || !_this.timerIsStart) {\n          _this.resetTimer();\n\n          clearInterval(timerId);\n        }\n      }, 1000 * 1);\n    };\n\n    return _this;\n  }\n\n  _createClass(Timer, [{\n    key: \"startTimer\",\n    value: function startTimer() {\n      this.timerIsStart = true;\n      this.timer();\n    }\n  }, {\n    key: \"resetTimer\",\n    value: function resetTimer() {\n      this.timerIsStart = false;\n      this.setState({\n        timer: this.maxTime\n      });\n    }\n  }, {\n    key: \"timerFormatter\",\n    value: function timerFormatter() {\n      var timer = this.state.timer;\n      return {\n        horse: 0,\n        minute: 0,\n        second: 0\n      };\n    }\n  }, {\n    key: \"setMaxTime\",\n    value: function setMaxTime(operand) {\n      this.maxTime += operand;\n\n      if (this.maxTime < 0) {\n        this.maxTime = 0;\n      }\n\n      this.setState({\n        timer: this.maxTime\n      });\n    }\n  }, {\n    key: \"setMaxLoop\",\n    value: function setMaxLoop(operand) {\n      var maxLoop = this.state.maxLoop;\n      maxLoop += operand;\n\n      if (maxLoop < 1) {\n        maxLoop = 1;\n      }\n\n      this.setState({\n        maxLoop: maxLoop\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state2 = this.state,\n          loop = _this$state2.loop,\n          maxLoop = _this$state2.maxLoop;\n\n      var _this$timerFormatter = this.timerFormatter(),\n          horse = _this$timerFormatter.horse,\n          minute = _this$timerFormatter.minute,\n          second = _this$timerFormatter.second;\n\n      return React.createElement(View, {\n        style: styles.container\n      }, React.createElement(View, {\n        style: styles.item\n      }, React.createElement(Button, {\n        onPress: function onPress() {\n          _this2.setMaxTime(-1);\n        },\n        title: \"-\",\n        color: \"deepskyblue\",\n        accessibilityLabel: \"-\",\n        disabled: this.timerIsStart\n      }), React.createElement(Text, {\n        style: styles.text\n      }, \"00:00:\" + timerStr), React.createElement(Button, {\n        onPress: function onPress() {\n          _this2.setMaxTime(1);\n        },\n        title: \"+\",\n        color: \"mediumseagreen\",\n        accessibilityLabel: \"+\",\n        disabled: this.timerIsStart\n      })), React.createElement(View, {\n        style: styles.item\n      }, React.createElement(Button, {\n        onPress: function onPress() {\n          _this2.setMaxLoop(-1);\n        },\n        title: \"-\",\n        color: \"deepskyblue\",\n        accessibilityLabel: \"-\",\n        disabled: this.timerIsStart\n      }), React.createElement(Text, {\n        style: styles.text\n      }, loop + \"/\" + maxLoop), React.createElement(Button, {\n        onPress: function onPress() {\n          _this2.setMaxLoop(1);\n        },\n        title: \"+\",\n        color: \"mediumseagreen\",\n        accessibilityLabel: \"+\",\n        disabled: this.timerIsStart\n      })), React.createElement(View, {\n        style: styles.item\n      }, React.createElement(View, {\n        style: styles.button\n      }, React.createElement(Button, {\n        onPress: function onPress() {\n          _this2.startTimer();\n        },\n        title: \"Start\",\n        color: \"#841584\",\n        accessibilityLabel: \"Start timer\"\n      })), React.createElement(Button, {\n        onPress: function onPress() {\n          _this2.resetTimer();\n\n          _this2.setState({\n            loop: 1\n          });\n        },\n        title: \"Reset\",\n        color: \"orangered\",\n        accessibilityLabel: \"Reset timer\"\n      })));\n    }\n  }]);\n\n  return Timer;\n}(React.Component);\n\nexport { Timer as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  item: {\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    padding: \"10px\"\n  },\n  text: {\n    fontSize: 30,\n    marginRight: '15px',\n    marginLeft: \"15px\"\n  },\n  button: {\n    marginRight: '15px'\n  }\n});","map":{"version":3,"sources":["/Users/rumble/dev/my/fitness-cycle/src/components/timer/index.tsx"],"names":["React","Timer","timerIsStart","maxTime","state","timer","loop","maxLoop","timerId","setInterval","setState","resetTimer","clearInterval","horse","minute","second","operand","timerFormatter","styles","container","item","setMaxTime","text","timerStr","setMaxLoop","button","startTimer","Component","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","flexDirection","flexWrap","padding","fontSize","marginRight","marginLeft"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;IAGqBC,K;;;;;;;;;;;;;;;UAEVC,Y,GAAuB,K;UACvBC,O,GAAkB,C;UAEzBC,K,GAAQ;AACJC,MAAAA,KAAK,EAAE,MAAKF,OADR;AAEJG,MAAAA,IAAI,EAAE,CAFF;AAGJC,MAAAA,OAAO,EAAE;AAHL,K;;UAgBRF,K,GAAQ,YAAM;AACV,UAAMA,KAAN,GAAgB,MAAKD,KAArB,CAAMC,KAAN;AAEA,UAAMG,OAAO,GAAGC,WAAW,CAAC,YAAM;AAC9B,YAAKJ,KAAK,GAAG,CAAR,IAAa,MAAKH,YAAvB,EAAsC;AAClCG,UAAAA,KAAK,IAAI,CAAT;;AACA,gBAAKK,QAAL,CAAc;AAAEL,YAAAA,KAAK,EAALA;AAAF,WAAd;AACH,SAHD,MAGO,IAAKA,KAAK,IAAI,CAAT,IAAc,MAAKH,YAAxB,EAAuC;AAC1C,4BAGI,MAAKE,KAHT;AAAA,cACIE,IADJ,eACIA,IADJ;AAAA,cAEIC,OAFJ,eAEIA,OAFJ;;AAKA,cAAKD,IAAI,IAAIC,OAAb,EAAuB;AACnB,kBAAKG,QAAL,CAAc;AAAEJ,cAAAA,IAAI,EAAEC;AAAR,aAAd;AACH,WAFD,MAEO;AACH,kBAAKG,QAAL,CAAc;AAAEJ,cAAAA,IAAI,EAAEA,IAAI,GAAG;AAAf,aAAd;AACH;;AAED,gBAAKK,UAAL;;AACAC,UAAAA,aAAa,CAACJ,OAAD,CAAb;AACH,SAdM,MAcA,IAAKH,KAAK,IAAI,CAAT,IAAc,CAAC,MAAKH,YAAzB,EAAuC;AAC1C,gBAAKS,UAAL;;AACAC,UAAAA,aAAa,CAACJ,OAAD,CAAb;AACH;AAEJ,OAvB0B,EAuBzB,OAAO,CAvBkB,CAA3B;AAwBH,K;;;;;;;WArCD,sBAAa;AACT,WAAKN,YAAL,GAAoB,IAApB;AACA,WAAKG,KAAL;AACH;;;WAED,sBAAa;AACT,WAAKH,YAAL,GAAoB,KAApB;AACA,WAAKQ,QAAL,CAAc;AAAEL,QAAAA,KAAK,EAAE,KAAKF;AAAd,OAAd;AACH;;;WA+BD,0BAAiB;AACb,UAAQE,KAAR,GAAkB,KAAKD,KAAvB,CAAQC,KAAR;AACA,aAAO;AACHQ,QAAAA,KAAK,EAAE,CADJ;AAEHC,QAAAA,MAAM,EAAE,CAFL;AAGHC,QAAAA,MAAM,EAAE;AAHL,OAAP;AAUH;;;WAED,oBAAWC,OAAX,EAA4B;AACxB,WAAKb,OAAL,IAAgBa,OAAhB;;AAEA,UAAK,KAAKb,OAAL,GAAe,CAApB,EAAwB;AACpB,aAAKA,OAAL,GAAe,CAAf;AACH;;AAED,WAAKO,QAAL,CAAc;AACVL,QAAAA,KAAK,EAAE,KAAKF;AADF,OAAd;AAGH;;;WAED,oBAAWa,OAAX,EAA4B;AACxB,UAAMT,OAAN,GAAkB,KAAKH,KAAvB,CAAMG,OAAN;AAEAA,MAAAA,OAAO,IAAIS,OAAX;;AAEA,UAAKT,OAAO,GAAG,CAAf,EAAmB;AACfA,QAAAA,OAAO,GAAG,CAAV;AACH;;AAED,WAAKG,QAAL,CAAc;AAAEH,QAAAA,OAAO,EAAPA;AAAF,OAAd;AACH;;;WAED,kBAAS;AAAA;;AACL,yBAGI,KAAKH,KAHT;AAAA,UACIE,IADJ,gBACIA,IADJ;AAAA,UAEIC,OAFJ,gBAEIA,OAFJ;;AAKA,iCAII,KAAKU,cAAL,EAJJ;AAAA,UACIJ,KADJ,wBACIA,KADJ;AAAA,UAEIC,MAFJ,wBAEIA,MAFJ;AAAA,UAGIC,MAHJ,wBAGIA,MAHJ;;AAMA,aACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAGG,MAAM,CAACC;AAArB,SACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAGD,MAAM,CAACE;AAArB,SACI,oBAAC,MAAD;AACI,QAAA,OAAO,EAAE,mBAAM;AACX,UAAA,MAAI,CAACC,UAAL,CAAgB,CAAC,CAAjB;AACH,SAHL;AAII,QAAA,KAAK,EAAC,GAJV;AAKI,QAAA,KAAK,EAAC,aALV;AAMI,QAAA,kBAAkB,EAAC,GANvB;AAOI,QAAA,QAAQ,EAAG,KAAKnB;AAPpB,QADJ,EAUI,oBAAC,IAAD;AACI,QAAA,KAAK,EAAGgB,MAAM,CAACI;AADnB,oBAGcC,QAHd,CAVJ,EAeI,oBAAC,MAAD;AACI,QAAA,OAAO,EAAE,mBAAM;AACX,UAAA,MAAI,CAACF,UAAL,CAAgB,CAAhB;AACH,SAHL;AAII,QAAA,KAAK,EAAC,GAJV;AAKI,QAAA,KAAK,EAAC,gBALV;AAMI,QAAA,kBAAkB,EAAC,GANvB;AAOI,QAAA,QAAQ,EAAG,KAAKnB;AAPpB,QAfJ,CADJ,EA0BI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEgB,MAAM,CAACE;AAApB,SACI,oBAAC,MAAD;AACI,QAAA,OAAO,EAAE,mBAAM;AACX,UAAA,MAAI,CAACI,UAAL,CAAgB,CAAC,CAAjB;AACH,SAHL;AAII,QAAA,KAAK,EAAC,GAJV;AAKI,QAAA,KAAK,EAAC,aALV;AAMI,QAAA,kBAAkB,EAAC,GANvB;AAOI,QAAA,QAAQ,EAAG,KAAKtB;AAPpB,QADJ,EAUI,oBAAC,IAAD;AACI,QAAA,KAAK,EAAGgB,MAAM,CAACI;AADnB,SAGQhB,IAHR,SAGgBC,OAHhB,CAVJ,EAeI,oBAAC,MAAD;AACI,QAAA,OAAO,EAAE,mBAAM;AACX,UAAA,MAAI,CAACiB,UAAL,CAAgB,CAAhB;AACH,SAHL;AAII,QAAA,KAAK,EAAC,GAJV;AAKI,QAAA,KAAK,EAAC,gBALV;AAMI,QAAA,kBAAkB,EAAC,GANvB;AAOI,QAAA,QAAQ,EAAG,KAAKtB;AAPpB,QAfJ,CA1BJ,EAmDI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAGgB,MAAM,CAACE;AAArB,SACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAGF,MAAM,CAACO;AAArB,SACI,oBAAC,MAAD;AACI,QAAA,OAAO,EAAE,mBAAM;AACX,UAAA,MAAI,CAACC,UAAL;AACH,SAHL;AAII,QAAA,KAAK,EAAC,OAJV;AAKI,QAAA,KAAK,EAAC,SALV;AAMI,QAAA,kBAAkB,EAAC;AANvB,QADJ,CADJ,EAWI,oBAAC,MAAD;AACI,QAAA,OAAO,EAAE,mBAAM;AACX,UAAA,MAAI,CAACf,UAAL;;AACA,UAAA,MAAI,CAACD,QAAL,CAAc;AAAEJ,YAAAA,IAAI,EAAE;AAAR,WAAd;AACH,SAJL;AAKI,QAAA,KAAK,EAAC,OALV;AAMI,QAAA,KAAK,EAAC,WANV;AAOI,QAAA,kBAAkB,EAAC;AAPvB,QAXJ,CAnDJ,CADJ;AA2EH;;;;EA/K8BN,KAAK,CAAC2B,S;;SAApB1B,K;AAkLrB,IAAMiB,MAAM,GAAGU,UAAU,CAACC,MAAX,CAAkB;AAC7BV,EAAAA,SAAS,EAAE;AACPW,IAAAA,IAAI,EAAE,CADC;AAEPC,IAAAA,eAAe,EAAE,MAFV;AAGPC,IAAAA,UAAU,EAAE,QAHL;AAIPC,IAAAA,cAAc,EAAE;AAJT,GADkB;AAO7Bb,EAAAA,IAAI,EAAE;AACFc,IAAAA,aAAa,EAAE,KADb;AAEFC,IAAAA,QAAQ,EAAE,MAFR;AAGFC,IAAAA,OAAO,EAAE;AAHP,GAPuB;AAY7Bd,EAAAA,IAAI,EAAE;AACFe,IAAAA,QAAQ,EAAE,EADR;AAEFC,IAAAA,WAAW,EAAE,MAFX;AAGFC,IAAAA,UAAU,EAAE;AAHV,GAZuB;AAiB7Bd,EAAAA,MAAM,EAAE;AACJa,IAAAA,WAAW,EAAE;AADT;AAjBqB,CAAlB,CAAf","sourcesContent":["import React from 'react';\nimport { StyleSheet, Text, View, Button} from 'react-native';\n\nexport default class Timer extends React.Component {\n\n    public timerIsStart:boolean = false;\n    public maxTime: number = 5;\n\n    state = {\n        timer: this.maxTime,\n        loop: 1,\n        maxLoop: 4\n    }\n\n    startTimer() {\n        this.timerIsStart = true;\n        this.timer();\n    }\n\n    resetTimer() {\n        this.timerIsStart = false;\n        this.setState({ timer: this.maxTime });\n    }\n\n    timer = () => {\n        let { timer } = this.state;\n\n        const timerId = setInterval(() => {\n            if ( timer > 0 && this.timerIsStart ) {\n                timer -= 1;\n                this.setState({ timer });\n            } else if ( timer <= 0 && this.timerIsStart ) {\n                const { \n                    loop,\n                    maxLoop\n                } = this.state;\n                \n                if ( loop >= maxLoop ) {\n                    this.setState({ loop: maxLoop});\n                } else {\n                    this.setState({ loop: loop + 1});\n                }\n\n                this.resetTimer();\n                clearInterval(timerId);\n            } else if ( timer <= 0 || !this.timerIsStart ){\n                this.resetTimer();\n                clearInterval(timerId);\n            }\n\n        },1000 * 1);\n    }\n    \n    timerFormatter() {\n        const { timer } = this.state;\n        return {\n            horse: 0,\n            minute: 0,\n            second: 0\n        }\n        // return (\n        //     timer < 10 \n        //         ? '0' + timer \n        //         : String(timer)\n        // );\n    }\n\n    setMaxTime(operand: number) {\n        this.maxTime += operand;\n\n        if ( this.maxTime < 0 ) { \n            this.maxTime = 0;\n        }\n\n        this.setState({\n            timer: this.maxTime\n        });\n    }\n\n    setMaxLoop(operand: number) {\n        let { maxLoop } = this.state;\n\n        maxLoop += operand;\n\n        if ( maxLoop < 1 ) { \n            maxLoop = 1;\n        }\n\n        this.setState({ maxLoop });\n    }\n\n    render() {\n        const { \n            loop, \n            maxLoop \n        } = this.state;\n        \n        const { \n            horse,\n            minute,\n            second \n        } = this.timerFormatter();\n\n        return (\n            <View style={ styles.container }>\n                <View style={ styles.item }>\n                    <Button \n                        onPress={() => {\n                            this.setMaxTime(-1);\n                        }} \n                        title='-' \n                        color='deepskyblue' \n                        accessibilityLabel='-' \n                        disabled={ this.timerIsStart }\n                    />\n                    <Text \n                        style={ styles.text }\n                    >\n                        {`00:00:${timerStr}`}\n                    </Text>\n                    <Button \n                        onPress={() => {\n                            this.setMaxTime(1);\n                        }} \n                        title='+' \n                        color='mediumseagreen' \n                        accessibilityLabel='+' \n                        disabled={ this.timerIsStart }\n                    />\n                </View>\n                <View style={styles.item}>\n                    <Button \n                        onPress={() => {\n                            this.setMaxLoop(-1);\n                        }}\n                        title='-' \n                        color='deepskyblue' \n                        accessibilityLabel='-' \n                        disabled={ this.timerIsStart }\n                    />\n                    <Text \n                        style={ styles.text }\n                    >\n                        {`${loop}/${maxLoop}`}\n                    </Text>\n                    <Button \n                        onPress={() => {\n                            this.setMaxLoop(1);\n                        }} \n                        title='+' \n                        color='mediumseagreen' \n                        accessibilityLabel='+' \n                        disabled={ this.timerIsStart }\n                    />\n                </View>\n                <View style={ styles.item }>\n                    <View style={ styles.button }>\n                        <Button \n                            onPress={() => {\n                                this.startTimer();\n                            }} \n                            title='Start' \n                            color='#841584' \n                            accessibilityLabel='Start timer'\n                        />\n                    </View>\n                    <Button \n                        onPress={() => {\n                            this.resetTimer();\n                            this.setState({ loop: 1});\n                        }} \n                        title='Reset' \n                        color=\"orangered\" \n                        accessibilityLabel='Reset timer'\n                    />\n                </View>\n            </View>\n        );\n    }\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: '#fff',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    item: {\n        flexDirection: \"row\",\n        flexWrap: \"wrap\",\n        padding: \"10px\"\n    },\n    text: {\n        fontSize: 30,\n        marginRight: '15px',\n        marginLeft: \"15px\"\n    },\n    button: {\n        marginRight: '15px'\n    }\n});\n"]},"metadata":{},"sourceType":"module"}